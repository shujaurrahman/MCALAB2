package Swing_Playground;

//
//import javax.swing.*;
//import java.awt.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//import java.io.BufferedReader;
//import java.io.FileReader;
//import java.io.IOException;
//
//public class pract implements ActionListener{
//    private JTextField UserName;
//    private JTextField password;
//    private JLabel message;
//
//    public pract(){
//        JFrame frame=new JFrame("User Login");
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        JPanel panel=new JPanel(new GridLayout(4,4));
//        JLabel usernameLabel=new JLabel("Username");
//        UserName=new JTextField();
//        JLabel passwordLabel=new JLabel("Password");
//        password=new JTextField();
//        JButton btn=new JButton("Login");
//        btn.addActionListener(this);
//        message=new JLabel();
//
//        panel.add(usernameLabel);
//        panel.add(UserName);
//        panel.add(passwordLabel);
//        panel.add(password);
//        panel.add(btn);
//        panel.add(message);
//
//        frame.add(panel);
//        frame.pack();
//        frame.setVisible(true);
//    }
//    @Override
//    public void actionPerformed(ActionEvent e){
//        String username=UserName.getText();
//        String password= UserName.getText();
//
//        if(isvalidUser(username,password)){
//            message.setText("Login Success!");
//        }
//        else{
//            message.setText("Incorrect details");
//        }
//    }
//
//    public boolean isvalidUser(String username,String password){
//        String fileName="/Users/shujaurrahman/Desktop/Sessional/file.txt";
//        try{
//            BufferedReader reader=new BufferedReader(new FileReader(fileName));
//            String line;
//            while((line=reader.readLine())!=null){
//                String[] parts=line.split(",");
//                if(parts.length==2 && parts[0].equals(username) && parts[1].equals(password)){
//                    return true;
//                }
//            }
//        }
//        catch (IOException e){
//            e.printStackTrace();
//        }
//        return false;
//    }
//
//    public static void main(String[] args) {
//        SwingUtilities.invokeLater(pract::new);
//    }
//
//}
//



//
//import java.io.BufferedReader;
//import java.io.FileReader;
//import java.io.IOException;
//import java.util.HashMap;
//import java.util.Map;
//
//public class pract {
//    public static void main(String[] args) {
//        String fileName="/Users/shujaurrahman/Desktop/Sessional/file.txt";
//        try{
//            BufferedReader reader=new BufferedReader(new FileReader(fileName));
//            String line;
//            Map<Character,Integer>charCount=new HashMap<>();
//            Map<String,Integer>wordCount= new HashMap<>();
//
//            while((line=reader.readLine())!=null){
//                //count character
//                for(char c :line.toCharArray()){
//                    if(Character.isLetter(c)){
//                        charCount.put(c,charCount.getOrDefault(c,0)+1);
//                    }
//                }
//
//                //count words
//                String[] words=line.split("\s");
//                for(String word:words){
//                    if(!word.isEmpty()){
//                        wordCount.put(word,wordCount.getOrDefault(word,0)+1);
//                    }
//                }
//            }
//            reader.close();
//            char maxchar=' ';
//            int maxCharCount=0;
//            for (Map.Entry<Character,Integer> entry:charCount.entrySet()){
//                if(entry.getValue()>maxCharCount){
//                    maxchar= entry.getKey();
//                    maxCharCount=entry.getValue();
//                }
//            }
//
//            String maxWord="";
//            int maxWordCount=0;
//            for (Map.Entry<String,Integer> entry:wordCount.entrySet()){
//                if(entry.getValue()>maxWordCount){
//                    maxWord= entry.getKey();
//                    maxWordCount=entry.getValue();
//                }
//            }
//            System.out.println("Character with maximum occurence: "+maxchar+"("+maxCharCount+")");
//            System.out.println("Character with maximum occurence: "+maxWord+"("+maxWordCount+")");
//        }
//
//        catch (IOException e) {
//            System.err.println("Error reading file"+ e.getMessage());
//        }
//    }
//
//}

//// Example: Using ActionListener with JButton
//import javax.swing.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//
//public class pract {
//    public static void main(String[] args) {
//        JFrame frame = new JFrame("Button Example");
//        JButton button = new JButton("Click me");
//        // Using anonymous inner class to handle button click event
//        button.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                System.out.println("Button clicked!");
//            }
//        });
//
//        frame.add(button);
//        frame.setSize(300, 200);
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.setVisible(true);
//    }
//}

//import javax.swing.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//
//public class pract{
//    public static void main(String[] args) {
//        JFrame frame=new JFrame("Anonysmous Class");
//        JButton btn=new JButton("Click me ");
//
//
//        btn.addActionListener(new ActionListener(){
//            @Override
//            public void actionPerformed(ActionEvent e){
//                System.out.print("Button Clicked");
//            }
//
//        });
//
//        frame.add(btn);
//        frame.setSize(400,300);
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.setVisible(true);
//    }
//
//}

import java.sql.SQLOutput;
//
//class Bike{
//    private String make;
//    private String model;
//    private int year;
//    private String color;
//
//    public Bike(String make,String model,int year,String color){
//        this.make=make;
//        this.model=model;
//        this.year=year;
//        this.color=color;
//
//    }
//
//    public void setMake(String make){
//        this.make=make;
//    }
//    public String getMake(){
//        return make;
//    }
//    public void setModel(String model){
//        this.model=model;
//    }
//
//    public String getModel(){
//        return model;
//    }
//
//    public void setYear(int year){
//        this.year=year;
//    }
//    public int year(){
//        return year;
//    }
//
//    public void setColor(String color){
//        this.color=color;
//
//    }
//    public String getColor(){
//        return color;
//    }
//
//}
//
// class sportsBike extends Bike{
//    private int topSpeed;
//    public sportsBike(String make,String model,int year,String color,int topSpeed){
//        super(make,model,year,color);
//        this.topSpeed=topSpeed;
//    }
//
//    public void setTopspeed(int year){
//        this.topSpeed=topSpeed;
//    }
//
//    public int gettopspeed(){
//        return topSpeed;
//    }
//
//}
//
//public class pract {
//    public static void main(String[] args) {
//        sportsBike b1=new sportsBike("shuja","x",1999,"red",120);
//        sportsBike b2=new sportsBike("yusuf","y",1992,"blue",160);
//        sportsBike b3=new sportsBike("asad","z",1995,"yellow",180);
//
//        if(b1.getColor().equals("red")){
//            System.out.println("Bike red has make of the car:  "+b1.getMake()+" and model :"+b1.getModel());
//        } else if (b2.getColor().equals("red")) {
//            System.out.println("Bike red has make of the car:  "+b2.getMake()+" and model :"+b2.getModel());
//        }
//        else if(b3.getColor().equals("red")){
//            System.out.println("Bike red has make of the car:  "+b3.getMake()+" and model :"+b3.getModel());
//        }
//        else{
//            System.out.println("No bike with color red");
//        }
//    }
//}
//
//
//import java.util.Random;
//
//public class pract {
//    public static void main(String[] args) {
//        // Generate two random prime numbers between 2 and 100
//        int R1 = generateRandomPrime();
//        int R2 = generateRandomPrime();
//
//        // Find which prime number has the largest number of relative primes
//        int relativePrimesR1 = countRelativePrimes(R1);
//        int relativePrimesR2 = countRelativePrimes(R2);
//
//        // Print the results
//        System.out.println("Random Prime Number R1: " + R1);
//        System.out.println("Random Prime Number R2: " + R2);
//        System.out.println("Number of Relative Primes for R1: " + relativePrimesR1);
//        System.out.println("Number of Relative Primes for R2: " + relativePrimesR2);
//
//        if (relativePrimesR1 > relativePrimesR2) {
//            System.out.println("R1 has the largest number of relative primes.");
//        } else if (relativePrimesR1 < relativePrimesR2) {
//            System.out.println("R2 has the largest number of relative primes.");
//        } else {
//            System.out.println("Both R1 and R2 have the same number of relative primes.");
//        }
//    }
//
//    // Method to generate a random prime number between 2 and 100
//    private static int generateRandomPrime() {
//        Random random = new Random();
//        int num;
//        do {
//            num = random.nextInt(99) + 2; // Generate a random number between 2 and 100
//        } while (!isPrime(num)); // Repeat until a prime number is generated
//        return num;
//    }
//
//    // Method to check if a number is prime
//    private static boolean isPrime(int num) {
//        if (num <= 1) return false;
//        for (int i = 2; i <= Math.sqrt(num); i++) {
//            if (num % i == 0) return false;
//        }
//        return true;
//    }
////
////
//    // Method to count the number of relative primes for a given number
//    private static int countRelativePrimes(int num) {
//        int count = 0;
//        for (int i = 2; i < num; i++) {
//            if (gcd(num, i) == 1) { // Check if 'i' is relatively prime to 'num'
//                count++;
//            }
//        }
//        return count;
//    }
////
//    // Method to find the greatest common divisor (GCD) using Euclid's algorithm
//    private static int gcd(int a, int b) {
//        while (b != 0) {
//            int temp = b;
//            b = a % b;
//            a = temp;
//        }
//        return a;
//    }
//}

//
//import java.util.Random;
//
//public class pract {
//    public static void main(String[] args) {
//        int r1=genRandomPrime();
//        int r2=genRandomPrime();
//
//        int relp1=countRelativePrime(r1);
//        int relp2=countRelativePrime(r2);
//
//        System.out.println("Random prime number 1: "+r1);
//        System.out.println("Random prime number 2: "+r2);
//        System.out.println("Relative Random prime numbers from  r1: "+relp1);
//        System.out.println("Relative Random prime numbers from  r2: "+relp2);
//
//
//        if (relp1>relp2){
//            System.out.println("R1 has largest relative prime numbers");
//        }
//        else if(relp1<relp2){
//            System.out.println("R2 has largest relative prime numbers");
//        }
//        else{
//            System.out.println("Both have same");
//        }
//    }
//    public static int genRandomPrime(){
//        Random ran=new Random();
//        int num;
//        do{
//            num=ran.nextInt(99)+2;
//        }while(!isPrime(num));
//        return num;
//    }
//    public static boolean isPrime(int num){
//        if(num<2) return false;
//        for(int i=2;i<=Math.sqrt(num);i++){
//            if(num%i==0){
//                return false;
//            }
//        }
//        return true;
//    }
//
//    public static int countRelativePrime(int num){
//        int count=0;
//        for(int i=0;i<=num;i++){
//            if(gcd(num,i)==1)
//                count++;
//        }
//        return count;
//    }
//    public static int gcd(int a,int b){
//        while(b!=0){
//            int temp=b;
//            b=a%b;
//            a=temp;
//        }
//        return a;
//    }
//}
//
//import java.util.Random;
//
//public class pract {
//
//    public static void main(String[] args) {
//        int r1=genP();
//        int r2=genP();
//
//        int rlp1=cR(r1);
//        int rlp2=cR(r2);
//        System.out.println("Random prime r1: "+r1);
//        System.out.println("Random prime r2: "+r2);
//        System.out.println("Relative Prime Number from r1: "+rlp1);
//        System.out.println("Relative Prime Number from r2: "+rlp2);
//
//        if(rlp1>rlp2){
//            System.out.println("R1 has largest relative primes.");
//        }else if(rlp2>rlp1){
//            System.out.println("R2 has largest relative primes.");
//        }
//        else{
//            System.out.println("Both Have same relative prime numbers");
//        }
//    }
//
//
//    public static int genP(){
//        Random ran=new Random();
//        int num;
//        do{
//            num=ran.nextInt(99)+2;
//        }while(!isPrime(num));
//        return num;
//    }
//    public static boolean isPrime(int num){
//        if(num<2) return  false;
//        for (int i=2;i<=Math.sqrt(num);i++){
//            if(num%i==0){
//                return false;
//            }
//        }
//        return true;
//    }
//    public static int cR(int num){
//        int count=0;
//        for(int i=2;i<=num;i++){
//            if(gcd(num,i)==1){
//                count++;
//            }
//        }
//        return count;
//    }
//    public static int gcd(int a,int b){
//        while(b!=0){
//            int temp=b;
//            b=a%b;
//            a=temp;
//        }
//        return a;
//    }
//}
//
